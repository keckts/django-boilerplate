// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { RestRestCheckRetrieveData, RestRestCheckRetrieveResponses, UsersCreateData, UsersCreateResponses, UsersDestroyData, UsersDestroyResponses, UsersListData, UsersListResponses, UsersPartialUpdateData, UsersPartialUpdateResponses, UsersRetrieveData, UsersRetrieveResponses, UsersUpdateData, UsersUpdateResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Check REST API
 *
 * This endpoint checks if the REST API is working.
 */
export const restRestCheckRetrieve = <ThrowOnError extends boolean = false>(options?: Options<RestRestCheckRetrieveData, ThrowOnError>) => {
    return (options?.client ?? client).get<RestRestCheckRetrieveResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/rest/rest-check/',
        ...options
    });
};

export const usersList = <ThrowOnError extends boolean = false>(options?: Options<UsersListData, ThrowOnError>) => {
    return (options?.client ?? client).get<UsersListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/users/',
        ...options
    });
};

export const usersCreate = <ThrowOnError extends boolean = false>(options: Options<UsersCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<UsersCreateResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const usersDestroy = <ThrowOnError extends boolean = false>(options: Options<UsersDestroyData, ThrowOnError>) => {
    return (options.client ?? client).delete<UsersDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{id}/',
        ...options
    });
};

export const usersRetrieve = <ThrowOnError extends boolean = false>(options: Options<UsersRetrieveData, ThrowOnError>) => {
    return (options.client ?? client).get<UsersRetrieveResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{id}/',
        ...options
    });
};

export const usersPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<UsersPartialUpdateResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const usersUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<UsersUpdateResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
